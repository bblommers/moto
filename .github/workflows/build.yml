name: TestNDeploy

on: [push, pull_request]

jobs:
  # Install and cache dependencies
  terraformcache:
    name: Caching Terraform dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8 ]

    steps:
    - name: Checkout Terraform Tests repo
      uses: actions/checkout@v2
      with:
        repository: localstack/localstack-terraform-test
        ref: build
        path: moto-terraform-tests
        submodules: 'true'
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.16.0'
    - run: go version
    - name: cache
      id: terraformcache
      uses: actions/cache@v2
      with:
        path: '~/.cache'
        key: 'terraformcache3'
    - name: Download
      env:
        DOWNLOAD_TEST_BIN: 1
      if: ${{ steps.terraformcache.outputs.cache-hit != 'true' }}
      run: |
        cd moto-terraform-tests
        bin/install-aws-test
        cd ..

  cache:
    name: Caching
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        id: pip-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}-4
      - name: Update pip
        if: ${{ steps.pip-cache.outputs.cache-hit != 'true' }}
        run: |
          python -m pip install --upgrade pip
      - name: Install project dependencies
        if: ${{ steps.pip-cache.outputs.cache-hit != 'true' }}
        run: |
          pip install -r requirements-dev.txt

  lint:
    name: Linting
    runs-on: ubuntu-latest
    needs: cache
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # Retrieve the previously cached dependencies
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}-4
    # Update PIP
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
    # Still need to properly install the dependencies - it will only skip the download part
    - name: Install project dependencies
      run: |
        pip install -r requirements-dev.txt
    - name: Lint with flake8
      run:
        make lint

  test:
    name: Unit test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}-4
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
    - name: Install project dependencies
      run: |
        pip install -r requirements-dev.txt
        pip install pytest-cov
        pip install pytest-github-actions-annotate-failures
        # https://github.com/aws/aws-xray-sdk-python/issues/196
    - name: Test with pytest
      run: |
        make test-coverage
    - name: "Upload coverage to Codecov"
      if: ${{ github.repository == 'spulec/moto'}}
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: false
        flags: unittests